<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>post.lxd.me</title>
   
   <link>https://post.lxd.me/</link>
   <description></description>
   <language>en-uk</language>
   <managingEditor>  </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>在PowerShell里并行执行脚本</title>
	  <link>//running-powershell-in-parallel</link>
	  <author> </author>
	  <pubDate>2014-07-25T00:18:29+08:00</pubDate>
	  <guid>//running-powershell-in-parallel</guid>
	  <description><![CDATA[
	     <p>在Bash里并行执行脚本有几种方法，可以在Bash里可以用把一个任务后面加<code class="highlighter-rouge">&amp;</code>开一个subshell直接甩倒后台去执行，也可以用<a href="http://www.gnu.org/software/parallel/" title="GNU Parallel">GNU Parallel</a>对并行执行的任务做更精细的控制。</p>

<p>而在PowerShell脚本里并行执行脚本，也有多种方法，一是用<code class="highlighter-rouge">Start-Job</code>命令启动一个background job，二是用并行的Workflow。</p>

<p>并行的Workflow PowerShell 2不支持，并且PowerShell的Workflow有一个很明确的限制是不能包含交互的命令。比如你需要把一段PowerShell脚本从串行改成并行，但是这段脚本又里使用了<code class="highlighter-rouge">Write-Host</code>命令直接打印到host的话，PowerShell就会无情的报错<code class="highlighter-rouge">Cannot call the 'Write-Host' command. Other commands from this module have been packaged as workflow activities, but this command was specifically excluded. </code>，你就得自己看着办了，比如用<code class="highlighter-rouge">Write-Output</code>。
<br />
我用了background job的方案，相对于Bash的subshell后台执行命令，PowerShell提供了更为丰富的命令来控制background job，我用到了这么几个：</p>

<ul>
  <li><code class="highlighter-rouge">Start-Job</code>，启动一个background job，这个命令定义一个background job的同时直接启动这个background job，我用到了几个参数：
    <ul>
      <li><code class="highlighter-rouge">-ScriptBlock</code> 需要执行的代码块</li>
      <li><code class="highlighter-rouge">-InitializationScript</code> 初始化代码块</li>
      <li><code class="highlighter-rouge">-Name</code> Job命名</li>
      <li><code class="highlighter-rouge">-InputObject</code> 传给background job的参数，如果需要传多个参数的话需要封装成一个Object，然后在ScriptBlock里再解析出来</li>
    </ul>
  </li>
  <li><code class="highlighter-rouge">Wait-Job</code>，阻塞等待background job结束，等待的background job可以有多个，作为参数传进去</li>
  <li><code class="highlighter-rouge">Receive-Job</code>，获取background job的结果，我用这个命令来获取background job的终端输出，需要被获取的background job也可以有多个，作为参数传进去</li>
  <li><code class="highlighter-rouge">Remove-Job</code>，当一个background job结束之后就可以用这个命令删除这个job</li>
</ul>

<p><br />
一个简单的例子：</p>

<figure class="highlight"><pre><code class="language-powershell" data-lang="powershell"><span class="c1"># background job需要执行的代码</span>
<span class="c1"># $Input是传进来的参数，是个Enumerator，需要遍历取出来</span>
<span class="nv">$execWrapper</span> <span class="o">=</span> <span class="o">{</span>
    <span class="k">function </span>Exec <span class="o">{</span>
        <span class="nv">$Input</span> | %<span class="o">{</span>
            <span class="nv">$Param</span> <span class="o">=</span> <span class="nv">$_</span>
        <span class="o">}</span>
        <span class="nb">Start-Sleep </span>1
        <span class="nb">Write-Output</span> <span class="s2">"This is job </span><span class="nv">$Param</span><span class="s2">"</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="c1"># 一般来讲业务上会有一个数组传进来，然后针对每个数组元素创建job并行执行</span>
<span class="nv">$data</span> <span class="o">=</span> @<span class="o">(</span><span class="s1">'one'</span>, <span class="s1">'two'</span>, <span class="s1">'three'</span><span class="o">)</span>

<span class="c1"># 遍历数组，创建job，Start-Job的同时Job就会执行，创建后将这些job存入$jobs数组</span>
<span class="c1"># Start-Job的参数分别是</span>
<span class="c1">#   -ScriptBlock 需要执行的代码块</span>
<span class="c1">#   -InitializationScript 初始化代码块</span>
<span class="c1">#   -Name Job命名</span>
<span class="c1">#   -InputObject 传给background job的参数</span>
<span class="nv">$jobs</span> <span class="o">=</span> @<span class="o">()</span>
<span class="nv">$data</span> | %<span class="o">{</span>
    <span class="nv">$job</span> <span class="o">=</span> <span class="nb">Start</span>-Job -ScriptBlock <span class="o">{</span>Exec<span class="o">}</span> -InitializationScript <span class="nv">$execWrapper</span> -Name <span class="nv">$_</span> -InputObject <span class="nv">$_</span>
    <span class="nv">$jobs</span> +<span class="o">=</span> <span class="nv">$job</span>
<span class="o">}</span>

<span class="c1"># 等待所有后台job结束</span>
<span class="nv">$null</span> <span class="o">=</span> Wait-Job -Job <span class="nv">$jobs</span>

<span class="c1"># 从Job接收终端输出，打印到当前终端</span>
<span class="nv">$jobs</span> | %<span class="o">{</span>
    <span class="nb">Write-Output</span> <span class="k">$(</span>Receive-Job -Job <span class="nv">$_</span><span class="k">)</span>
<span class="o">}</span>

<span class="c1"># 清理掉job</span>
Remove-Job -Job <span class="nv">$jobs</span>
Get-Job</code></pre></figure>

<p><br />
但是<a href="http://isaachan.github.io/">韩老师</a>指出，这种方法有很大缺陷。当background job执行时间很长的时候，如果我们先Wait它们执行完毕，再获取background job的输出，那么造成的效果就是当前的PowerShell session会hang住很长时间，造成很糟糕的运维体验。</p>

<p>那么就不能用<code class="highlighter-rouge">Wait-Job</code>命令了，要在background job还在running的时候，用<code class="highlighter-rouge">Receive-Job</code>“实时的”获取到它的终端输出，打印到当前的PowerShell上。</p>

<p>具体的做法是用一个循环来轮询，检查各个background job是否还有数据可读，如果可读，就用<code class="highlighter-rouge">Receive-Job</code>命令取出这个background job的result，再<code class="highlighter-rouge">Write-Host</code>到当前的PowerShell里。如果没有可读的的background job，则认为所有job都跑完了，此时就相当于<code class="highlighter-rouge">Wait-Job</code>释放的那一刻，从循环中跳出，再执行后续操作。</p>

<p>改进后的代码是这样的：</p>

<figure class="highlight"><pre><code class="language-powershell" data-lang="powershell"><span class="c1"># 扩充一下background job需要执行的代码</span>
<span class="nv">$execWrapper</span> <span class="o">=</span> <span class="o">{</span>
    <span class="k">function </span>Exec <span class="o">{</span>
        <span class="nv">$Input</span> | %<span class="o">{</span>
            <span class="nv">$Param</span> <span class="o">=</span> <span class="nv">$_</span>
        <span class="o">}</span>
        <span class="nb">Start-Sleep </span>1
        <span class="nb">Write-Output</span> <span class="s2">"This is job </span><span class="nv">$Param</span><span class="s2">"</span>
        <span class="nb">Start-Sleep </span>1
        <span class="nb">Write-Output</span> <span class="s2">"This is job </span><span class="nv">$Param</span><span class="s2"> again"</span>
        <span class="nb">Start-Sleep </span>1
        <span class="nb">Write-Output</span> <span class="s2">"This is job </span><span class="nv">$Param</span><span class="s2"> again, again"</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="nv">$data</span> <span class="o">=</span> @<span class="o">(</span><span class="s1">'one'</span>, <span class="s1">'two'</span>, <span class="s1">'three'</span><span class="o">)</span>

<span class="nv">$jobs</span> <span class="o">=</span> @<span class="o">()</span>
<span class="nv">$data</span> | %<span class="o">{</span>
    <span class="nv">$job</span> <span class="o">=</span> <span class="nb">Start</span>-Job -ScriptBlock <span class="o">{</span>Exec<span class="o">}</span> -InitializationScript <span class="nv">$execWrapper</span> -Name <span class="nv">$_</span> -InputObject <span class="nv">$_</span>
    <span class="nv">$jobs</span> +<span class="o">=</span> <span class="nv">$job</span>
<span class="o">}</span>

<span class="c1"># 因为要实时打印出background job的输出，那么就不能调用这个函数被动等待所有background job结束</span>
<span class="c1"># $null = Wait-Job -Job $jobs</span>

<span class="c1"># 改用手动循环检查job的状态，同时将background job的输出打印到当前终端</span>
<span class="k">While</span> <span class="o">(</span>1<span class="o">)</span> <span class="o">{</span>
    <span class="nv">$JobsRunning</span> <span class="o">=</span> 0
    <span class="nv">$jobs</span> | %<span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="nv">$_</span>.HasMoreData<span class="o">)</span> <span class="o">{</span>
            <span class="nv">$JobsRunning</span> +<span class="o">=</span> 1
            <span class="c1">#在这里将background job的输出打印到当前终端</span>
            <span class="nb">Write-Output</span> <span class="s2">"This is result of Job </span><span class="k">$(</span><span class="nv">$_</span>.Name<span class="k">)</span><span class="s2"> :"</span>
            <span class="nb">Write-Output</span> <span class="k">$(</span>Receive-Job -Job <span class="nv">$_</span><span class="k">)</span>
        <span class="o">}</span>
    <span class="o">}</span>
   <span class="k">if</span> <span class="o">(</span><span class="nv">$JobsRunning</span> -eq 0<span class="o">)</span> <span class="o">{</span>
       <span class="k">Break</span>
   <span class="o">}</span>
   <span class="nb">Start-Sleep </span>1
<span class="o">}</span>

Remove-Job -Job <span class="nv">$jobs</span>
Get-Job</code></pre></figure>

<p><br /><br />
当然在具体场景下面还有更多的坑要去趟，比如要改写在background job里执行的PowerShell代码用的是<code class="highlighter-rouge">Write-Host</code>，因为<code class="highlighter-rouge">Write-Host</code>是数据直接写向host，而不是pipeline，那么<code class="highlighter-rouge">Receive-Job</code>的用法就不一样了，它也会直接写向host。再比如你需要串行改并行的PowerShell脚本本身是在一个PowerShell Module里面，并且background job需要调用当前这个Module里的另外一个函数。</p>

<p>因为Start一个background job是开一个全新的PowerShell session，在这个全新的PowerShell session里没有Import这个Module，所以会提示这个函数找不到。</p>

<p>这时候我采用的方法是在<code class="highlighter-rouge">Start-Job</code>的<code class="highlighter-rouge">-InputObject</code>参数里把当前脚本所在的Module的psm1文件路径封装进去传进去，background job启动之后再解析出这个psm1文件路径重新<code class="highlighter-rouge">Import-Module</code>。</p>

<p>因为PowerShell 2和PowerShell 4的<code class="highlighter-rouge">$PSScriptRoot</code>含义不同，为了避免兼容性问题，我用了<code class="highlighter-rouge">$MyInvocation</code>。大概是这样的：</p>

<figure class="highlight"><pre><code class="language-powershell" data-lang="powershell"><span class="nv">$currentModulePath</span> <span class="o">=</span> <span class="s2">"</span><span class="k">$(</span><span class="nb">split-path</span> -parent <span class="nv">$MyInvocation</span>.MyCommand.Definition<span class="k">)</span><span class="se">\p</span><span class="s2">smodule.psm1"</span>
<span class="nv">$execWrapper</span> <span class="o">=</span> <span class="o">{</span>
    <span class="k">function </span>Exec <span class="o">{</span>
        <span class="nv">$Input</span> | %<span class="o">{</span>
            Import-Module <span class="nv">$_</span><span class="o">[</span><span class="s1">'currentModulePath'</span><span class="o">]</span> -Force | <span class="nb">Out-Default</span>
            <span class="nv">$Param</span> <span class="o">=</span> <span class="nv">$_</span><span class="o">[</span><span class="s1">'data'</span><span class="o">]</span>
        <span class="o">}</span>
        <span class="nb">Start-Sleep </span>1
        <span class="nb">Write-Output</span> <span class="s2">"This is job </span><span class="nv">$Param</span><span class="s2">"</span>
    <span class="o">}</span>
<span class="o">}</span>

...
<span class="nv">$job</span> <span class="o">=</span> <span class="nb">Start</span>-Job -ScriptBlock <span class="o">{</span>Exec<span class="o">}</span> -InitializationScript <span class="nv">$execWrapper</span> -Name <span class="nv">$_</span> -InputObject @<span class="o">{</span><span class="k">data</span><span class="o">=</span><span class="nv">$_</span>; <span class="nv">currentModulePath</span><span class="o">=</span><span class="nv">$currentModulePath</span><span class="o">}</span>
...</code></pre></figure>

<p><br />
完了，有机会再整理一下<a href="http://www.gnu.org/software/parallel/" title="GNU Parallel">GNU Parallel</a>。
<br /><br />
参考：</p>

<ul>
  <li><a href="http://technet.microsoft.com/en-us/library/hh849698.aspx">Start-Job</a></li>
  <li><a href="http://technet.microsoft.com/en-us/library/hh849735.aspx">Wait-Job</a></li>
  <li><a href="http://technet.microsoft.com/en-us/library/hh849718.aspx">Receive-Job</a></li>
  <li><a href="http://vwiki.co.uk/Background_Jobs_%28PowerShell%29">Background Jobs (PowerShell)</a></li>
</ul>


	  ]]></description>
	</item>


</channel>
</rss>
